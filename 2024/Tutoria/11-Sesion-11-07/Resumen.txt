API Rest => Service
================
1. Motor bd: Mysql
2. Lengueje de programación: Java (jdk 17)
3. IDE (Entorno Integrado de Desarrollo): Intellij IDEA
4. Herramienta Cliente API: Postman
5. Framework: Spring Boot (Apache tomcat)

=================
Arquitectura: 
	* MVC [Entity, IRespository, IService, Service, Controller]
	* Hibernate (ORM => Objeto de mapeo relacional) => JPA
	* Nomenclatura
		Documento: PascalCase
		Atributos: calmelCase
		BD: unders_core
		
=================
1. Confirgurar mi equipo
	* BD
	* JAVA (LTS jdk 8 11 17)  https://www.oracle.com/co/java/technologies/downloads/#jdk17-windows
	* IDE: https://www.jetbrains.com/idea/download/?section=windows
	* Postman: https://www.postman.com/downloads/
	
2. Crear el proyecto
	* spring initializr: https://start.spring.io/
		* Project: Maven
		* Language: Java
		* Spring Boot: 3.3.1
		* Project Metadata
			Group: com.sena
			Artifact: EjemploAPI
			Name: EjemploAPI
			Description: Ejemplo para construir una API
			Package name: com.sena.EjemploAPI
		* Packaging: jar
		* Java: 17
		* Dependencies
			* Spring Boot DevTools
			* Spring Web 
			* Spring Data JPA
			* MySQL Driver 
	https://start.spring.io/#!type=maven-project&language=java&platformVersion=3.3.1&packaging=jar&jvmVersion=17&groupId=com.sena&artifactId=EjemploAPI&name=EjemploAPI&description=Ejemplo%20para%20construir%20una%20API&packageName=com.sena.EjemploAPI&dependencies=devtools,web,data-jpa,mysql

2. Descargar el proyecto.
	* Descomprimir
	* Abrir proyecto con su IDE que use.
	
3. Crear configuración del Application Properties

4. Crear los paquetes del proyecto.

	Entity, IRespository, IService, Service, Controller

	Nota: 
	- Al iniciar en NombreNormal, significa que es una entidad de implementación
	- Al iniciar con I, más el nombre normal, significa que es de tipo intefaz
	- Al iniciar con A, más el nombre normal, significa que es una clase abstracta


Arquitectura

Entity: Crea un paquete para las clases de datos.
Define entidades utilizando anotaciones de JPA para mapearlas a tablas de base de datos.

DTO:
Crea un paquete para los DTOs.
Define objetos de transferencia de datos que representen las estructuras de datos utilizadas en las solicitudes y respuestas HTTP.

IRepository: Crea un paquete para los repositorios de acceso a datos.
Utiliza Spring Data JPA para definir interfaces de repositorio que extiendan JpaRepository.

IService: Crea un paquete para los servicios de negocio.
Define interfaces para la lógica de negocio utilizando el patrón de diseño Service.

Service: Crea un paquete para las implementaciones de servicios.
Implementa la lógica de negocio en clases que implementen las interfaces de servicio.

Controller: Crea un paquete para los controladores.
Define controladores utilizando anotaciones de Spring MVC para manejar las peticiones HTTP.

Security: Crea un paquete para la configuración de seguridad.
Define clases de configuración para la seguridad utilizando Spring Security.

Utils: Crea un paquete para utilidades comunes.
Define clases de utilidad para funcionalidades reutilizables en todo el proyecto.


ORM(JPA): Una JpaRepository es una interfaz proporcionada por Spring Data JPA que simplifica el acceso y la manipulación de datos en una base de datos mediante operaciones CRUD (Crear, Leer, Actualizar, Eliminar). Está diseñada para interactuar con entidades persistentes en una base de datos relacional a través de métodos declarativos. Al extender JpaRepository, los desarrolladores pueden aprovechar funcionalidades como consultas automáticas basadas en convenciones de nombres de métodos, paginación y ordenamiento integrados, facilitando el desarrollo de capas de acceso a datos robustas y eficientes en aplicaciones Spring.

La anotación @Repository en Spring Framework se utiliza para indicar que una clase es un bean de repositorio, es decir, que maneja el acceso a datos o la persistencia de datos. Principalmente, se utiliza en capas de acceso a datos para etiquetar clases que encapsulan la lógica de acceso a la base de datos, como las clases que extienden JpaRepository.

Implementar los métodos: Este error ocurre en Java cuando una clase declara implementar una interfaz (IPersonaService en este caso) pero no proporciona una implementación para todos los métodos abstractos definidos en esa interfaz. Para solucionarlo, la clase PersonaService debe proporcionar una implementación concreta para el método abstracto All() definido en IPersonaService. Esto se logra agregando el método con la firma exacta que la interfaz requiere dentro de la clase PersonaService.
	
			
		
